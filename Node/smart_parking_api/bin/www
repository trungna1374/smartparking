#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('smart-parking-api:server');
var http = require('http');
const socketIO = require('socket.io')
const axios = require("axios");
var fs = require('fs');
var spawn = require('child_process').spawn;
var proc;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketIO(server)

// This is what the socket.io syntax is like, we will work this later
var sockets = {};
io.on('connection', socket => {
  sockets[socket.id] = socket;
  console.log("Connected Socket")

  const getApiAndEmit = async socket => {
    if (app.get('readPark')) {
      try {
        const res = await axios.get("http://localhost:4000/getParkData");
        socket.emit("getPark", res.data);
      } catch (error) {
        console.error(`Error: ${error.code}`);
      }
    }
  };

  socket.on('subscribeToGetPark', (interval) => {
    console.log('client is subscribing to timer with interval ', interval);
    app.set('readPark', true);
    setInterval(() => getApiAndEmit(socket), interval);
  });

  socket.on('disconnect', () => {
    delete sockets[socket.id];
    app.set('readPark', false);
    console.log('user disconnected')
    // no more sockets, kill the stream
    if (Object.keys(sockets).length == 0) {
      app.set('watchingFile', false);
      if (proc) proc.kill();
      fs.unwatchFile('./stream/image_stream.jpg');
    }
  })

  socket.on('start-stream', function() {
    startStreaming(io);
  });
})

function startStreaming(io) {

  if (app.get('watchingFile')) {
    io.sockets.emit('liveStream', 'image_stream.jpg?_t=' + (Math.random() * 100000));
    return;
  }

  var args = ["-w", "640", "-h", "480", "-o", "./stream/image_stream.jpg", "-t", "999999999", "-tl", "100"];
  proc = spawn('raspistill', args);

  console.log('Watching for changes...');

  app.set('watchingFile', true);

  fs.watchFile('./stream/image_stream.jpg', function (current, previous) {
    io.sockets.emit('liveStream', 'image_stream.jpg?_t=' + (Math.random() * 100000));
  })

}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
